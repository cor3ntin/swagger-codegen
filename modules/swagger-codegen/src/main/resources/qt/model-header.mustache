{{#models}}{{#model}}#ifndef AK_SWAGGER_{{classname}}_H_
#define AK_SWAGGER_{{classname}}_H_
{{/model}}
{{/models}}

#include "SwaggerUtils.h"
#include <QStringList> //fixme

class QJsonObject;

{{#imports}}{{{import}}}
{{/imports}}

{{#models}}{{#model}}
namespace swagger {

class {{classname}} {

public:
    {{#hasRequiredVars}}{{classname}}();{{/hasRequiredVars}}
    {{classname}}({{#vars}}{{^isPrimitiveType}}const {{/isPrimitiveType}}{{{datatype}}}{{^isPrimitiveType}}&{{/isPrimitiveType}} {{name}}{{^required}} = {}{{/required}}{{#hasMore}},
        {{/hasMore}}{{/vars}});

{{#vars}}    {{{datatype}}} {{getter}}() const;
    void {{setter}}({{^isPrimitiveType}}const{{/isPrimitiveType}} {{{datatype}}} {{^isPrimitiveType}}&{{/isPrimitiveType}} {{name}});

{{/vars}}

    QJsonObject serialize() const;
    static boost::optional<{{classname}}> unserialize(const QJsonObject & json);

private:
{{#vars}}    {{{datatype}}} m_{{name}};
{{/vars}}
};

template <>
struct is_model<{{classname}}> : std::true_type {};

}
Q_DECLARE_METATYPE(swagger::{{classname}});

#endif
{{/model}}
{{/models}}
